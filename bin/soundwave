#!/usr/bin/env ruby

require 'optparse'
require 'soundwave'

help = <<HELP
Soundwave is a static site generator.

soundwave        #=> Builds a Soundwave site in the current directory
soundwave init   #=> Set up a new Soundwave site in the current directory

HELP

if ARGV.first == "init"
  ARGV.shift
  puts "soundwave init not yet implemented"
  exit(0)
else
  # puts "Soundwave #{Soundwave::VERSION}"
end

options = {}

opts = OptionParser.new do |opts|
  opts.summary_width = 24
  opts.banner = help

  # opts.on("-r", "--require LIBRARY", "Require the LIBRARY before doing anything") do |lib|
  #   require lib
  # end

  # opts.on("-I DIRECTORY", "--include=DIRECTORY", "Adds the directory to the Sprockets load path") do |directory|
  #   environment.append_path directory
  # end

  opts.on("-e", "--exclude [file]", "Skip files/directories named FILE when generating the site") do |file|
    Soundwave.config.exclude << file
  end

  opts.on("--version", "Display current version") do
    puts "Soundwave " + Soundwave::VERSION
    exit 0
  end

  opts.on("--watch", "Automatically regenerate when files are changed") do
    options["watch"] = true
  end
end

opts.parse!

# TODO: Move into Soundwave proper and rename
if File.exists?("./_soundwave.rb")
  require "./_soundwave.rb"
end

environment = Soundwave::Environment.new

if options["watch"]
  require 'fssm'
  monitor = FSSM::Monitor.new #(:directories => true)

  entries = Dir.chdir(environment.root_dir.expand_path) { Dir.glob("*") }
  entries = environment.filter_entries(entries)
  entries.map! { |e| environment.root_dir.join(e) }
  
  directories = entries.select { |e| e.directory? }
  indiv_files = entries - directories

  # Also monitor the data and includes directories
  directories.push environment.data_dir
  directories.push environment.root_dir.join("_includes")

  directories.each do |dir_path|
    monitor.path(dir_path) do
      update { |base_dir, relative_path|
        environment.generate_site
      } 
    end
  end

  indiv_files.each do |file_path|
    monitor.file(file_path) do
      update { |full_path, relative_dir|
        environment.generate_site
      } 
    end
  end

  environment.generate_site
  puts "Now watching for changes in #{environment.root_dir}..."
  monitor.run
else
  environment.generate_site
  exit(0)
end